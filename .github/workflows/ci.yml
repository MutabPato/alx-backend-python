name: Messaging App CI/CD

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root_password_for_ci
          MYSQL_DATABASE: messaging_app_test_db
          MYSQL_USER: django_ci_user
          MYSQL_PASSWORD: django_ci_password
        ports:
          - 3306:3306 # Map container port 3306 to host port 3306 (within the job's network)

    env:
      DATABASE_NAME: messaging_app_test_db
      DATABASE_USER: django_ci_user
      DATABASE_PASSWORD: django_ci_password
      DATABASE_HOST: mysql # This is the service name, which acts as the hostname within GitHub Actions
      DATABASE_PORT: 3306

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Python Environment
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'
          cache: 'pip'

      # New and improved step: Wait for MySQL to be ready using netcat (nc)
      - name: Wait for MySQL service to be accessible
        run: |
          # Install netcat if it's not already on the runner
          sudo apt-get update && sudo apt-get install -y netcat-traditional

          echo "Waiting for MySQL service to accept connections on $DATABASE_HOST:$DATABASE_PORT..."
          # Loop until netcat successfully connects to the MySQL port
          for i in $(seq 1 60); do # Try for up to 600 seconds (60 * 10s)
            nc -z -v -w 2 "$DATABASE_HOST" "$DATABASE_PORT" 2>/dev/null && break
            echo "Still waiting for MySQL... ($i/60)"
            sleep 10
          done
          # After the loop, check if the connection was successful
          if ! nc -z -v -w 2 "$DATABASE_HOST" "$DATABASE_PORT" 2>/dev/null; then
            echo "MySQL service did not become accessible in time."
            exit 1
          fi
          echo "MySQL service is accessible!"

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install mysqlclient pytest pytest-django

      - name: Run Linting (flake8)
        run: |
          pip install flake8
          flake8 .
        continue-on-error: true

      - name: Run Pytest Tests
        run: pytest --junitxml=test-results.xml

      - name: Upload Test Results (Artifact)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: test-results.xml
